<style>
  body{
    background: white;
  }
  div#d3-graphic{
    background: <%= @candidate.d3_colors.first %>;

  }
</style>

<h2><%= @candidate.pretty_print_name %></h2>
<div id="loading-wrapper">
  <div class="throbber-loader">
    Loadingâ€¦
  </div>
</div>
<div id="d3-graphic"></div>

<script>

var margin = 20,
    diameter = 700, 
    screenWidth = $("body").width();

var color = d3.scale.linear()
    .domain([-1, 5])
    .range(["<%= @candidate.d3_colors.first %>", "<%= @candidate.d3_colors.last %>"]);

var pack = d3.layout.pack()
    .padding(4)
    .size([diameter - margin, diameter - margin])
    .value(function(d) { return d.size; });

var svg = d3.select("div#d3-graphic").append("svg")
    .attr("width", screenWidth)
    .attr("height", diameter)
    .append("g")
    .attr("transform", "translate(" + screenWidth / 2 + "," + diameter / 2 + ")");

d3.json("<%= @candidate.candidate_id %>/d3.json", function(error, root) {
  if (error) throw error;

  var focus = root,
      nodes = pack.nodes(root),
      view;

  var circle = svg.selectAll("circle")
      .data(nodes)
      .enter().append("circle")
      .attr("class", function(d) { return d.parent ? d.children ? "node" : "node node--leaf" : "node node--root"; })
      .style("fill", function(d) { return d.children ? color(d.depth) : null; })
      .attr("id",function(d) {return d.name; })
      .on("click", function(d) { if (focus !== d) zoom(d), d3.event.stopPropagation(); });

  var node = svg.selectAll("circle");

  d3.select("div#d3-graphic")
      .style("background", color(-1))
      .on("click", function() { zoom(root); });

  $("#loading-wrapper").slideUp('slow');

  zoomTo([root.x, root.y, root.r * 2 + margin]);

  function zoom(d) {
    var focus0 = focus; focus = d;

    var transition = d3.transition()
        .duration(750)
        .tween("zoom", function(d) {
          var i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2 + margin]);
          return function(t) { zoomTo(i(t)); };
        });
  }

  function zoomTo(v) {
    var k = diameter / v[2]; view = v;
    node.attr("transform", function(d) { return "translate(" + (d.x - v[0]) * k + "," + (d.y - v[1]) * k + ")"; });
    circle.attr("r", function(d) { return d.r * k; });
  }

  $("svg circle").tipsy({ 
    gravity: 'w', 
    html: true, 
    title: function() {
      var text = this.id;
      return text;
    }
  });

});

d3.select(self.frameElement).style("height", diameter + "px");

</script>